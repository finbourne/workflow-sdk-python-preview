# coding: utf-8

"""
    FINBOURNE Workflow API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.1.1271
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid_workflow.configuration import Configuration


class ActionLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'id': 'str',
        'origin': 'ActionLogOrigin',
        'action_type': 'str',
        'run_as_user_id': 'str',
        'logged_items': 'list[ActionLogItem]'
    }

    attribute_map = {
        'id': 'id',
        'origin': 'origin',
        'action_type': 'actionType',
        'run_as_user_id': 'runAsUserId',
        'logged_items': 'loggedItems'
    }

    required_map = {
        'id': 'required',
        'origin': 'required',
        'action_type': 'required',
        'run_as_user_id': 'optional',
        'logged_items': 'required'
    }

    def __init__(self, id=None, origin=None, action_type=None, run_as_user_id=None, logged_items=None, local_vars_configuration=None):  # noqa: E501
        """ActionLog - a model defined in OpenAPI"
        
        :param id:  Unique identifier of the Action (required)
        :type id: str
        :param origin:  (required)
        :type origin: lusid_workflow.ActionLogOrigin
        :param action_type:  The type of the Action (required)
        :type action_type: str
        :param run_as_user_id:  The ID of the user that the Action was performed by.  If not specified, the actions were performed by the \"current user\".
        :type run_as_user_id: str
        :param logged_items:  The logged items for this Action (required)
        :type logged_items: list[lusid_workflow.ActionLogItem]

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._origin = None
        self._action_type = None
        self._run_as_user_id = None
        self._logged_items = None
        self.discriminator = None

        self.id = id
        self.origin = origin
        self.action_type = action_type
        self.run_as_user_id = run_as_user_id
        self.logged_items = logged_items

    @property
    def id(self):
        """Gets the id of this ActionLog.  # noqa: E501

        Unique identifier of the Action  # noqa: E501

        :return: The id of this ActionLog.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActionLog.

        Unique identifier of the Action  # noqa: E501

        :param id: The id of this ActionLog.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and not re.search(r'^[a-zA-Z0-9\-]+$', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-]+$/`")  # noqa: E501

        self._id = id

    @property
    def origin(self):
        """Gets the origin of this ActionLog.  # noqa: E501


        :return: The origin of this ActionLog.  # noqa: E501
        :rtype: lusid_workflow.ActionLogOrigin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ActionLog.


        :param origin: The origin of this ActionLog.  # noqa: E501
        :type origin: lusid_workflow.ActionLogOrigin
        """
        if self.local_vars_configuration.client_side_validation and origin is None:  # noqa: E501
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501

        self._origin = origin

    @property
    def action_type(self):
        """Gets the action_type of this ActionLog.  # noqa: E501

        The type of the Action  # noqa: E501

        :return: The action_type of this ActionLog.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this ActionLog.

        The type of the Action  # noqa: E501

        :param action_type: The action_type of this ActionLog.  # noqa: E501
        :type action_type: str
        """
        if self.local_vars_configuration.client_side_validation and action_type is None:  # noqa: E501
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                action_type is not None and len(action_type) < 1):
            raise ValueError("Invalid value for `action_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._action_type = action_type

    @property
    def run_as_user_id(self):
        """Gets the run_as_user_id of this ActionLog.  # noqa: E501

        The ID of the user that the Action was performed by.  If not specified, the actions were performed by the \"current user\".  # noqa: E501

        :return: The run_as_user_id of this ActionLog.  # noqa: E501
        :rtype: str
        """
        return self._run_as_user_id

    @run_as_user_id.setter
    def run_as_user_id(self, run_as_user_id):
        """Sets the run_as_user_id of this ActionLog.

        The ID of the user that the Action was performed by.  If not specified, the actions were performed by the \"current user\".  # noqa: E501

        :param run_as_user_id: The run_as_user_id of this ActionLog.  # noqa: E501
        :type run_as_user_id: str
        """
        if (self.local_vars_configuration.client_side_validation and
                run_as_user_id is not None and len(run_as_user_id) > 1024):
            raise ValueError("Invalid value for `run_as_user_id`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                run_as_user_id is not None and not re.search(r'^[a-zA-Z0-9\-_]+$', run_as_user_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `run_as_user_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501

        self._run_as_user_id = run_as_user_id

    @property
    def logged_items(self):
        """Gets the logged_items of this ActionLog.  # noqa: E501

        The logged items for this Action  # noqa: E501

        :return: The logged_items of this ActionLog.  # noqa: E501
        :rtype: list[lusid_workflow.ActionLogItem]
        """
        return self._logged_items

    @logged_items.setter
    def logged_items(self, logged_items):
        """Sets the logged_items of this ActionLog.

        The logged items for this Action  # noqa: E501

        :param logged_items: The logged_items of this ActionLog.  # noqa: E501
        :type logged_items: list[lusid_workflow.ActionLogItem]
        """
        if self.local_vars_configuration.client_side_validation and logged_items is None:  # noqa: E501
            raise ValueError("Invalid value for `logged_items`, must not be `None`")  # noqa: E501

        self._logged_items = logged_items

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActionLog):
            return True

        return self.to_dict() != other.to_dict()
